import pytest

from main import BooksCollector

class TestBooksCollector:

# ПРИМЕЧАНИЕ
# в тестах задействована фикстура autouse=True, которая срабатывает автоматически перед каждым тестом в соответствии с заданием
# в тестах задействована параметризация в случае с граничными значениями, принцип ее работы усвоил, в остальных случаях не стал задействовать
# в тестах с параметризацией тянутся ответы с кодами \u0427\u0442\u043e, вместо подставленных значений, т.к. 'Из-за кодировки в терминале, русские символы не отображаются'
# в тестах применено как позитивное, так и негативное тестирование в разрезе граничных значений

    # создаем фикстуру для независимости тестов друг от друга (используем наиболее простой вариант
    # без отдельного файла conftest.py, т.к. задействована всего лишь одна фикстура и в тренажере было
    # указано, что данную фикстуру лучше не выносить в отдельный файл
    @pytest.fixture(autouse=True)
    def collector(self):
        return BooksCollector()

# ТЕСТ 1 (тестируем: add_new_book)(тест-пример, изначально уже был добавлен в файле)

    # тестируем метод добавления новой книги
    def test_add_new_book_add_two_books(self, collector):
        collector.add_new_book('Гордость и предубеждение и зомби')  # добавляем одну книги
        collector.add_new_book('Что делать, если ваш кот хочет вас убить')  # добавляем вторую книги
        # проверяем, что добавилось именно две в books_genre
        # словарь books_genre, который нам возвращает метод get_books_genre, должен иметь длину 2
        assert len(collector.get_books_genre()) == 2

# ТЕСТ 2 (тестируем: фикстуру collector)

    # тестируем фикстуру / независимость тестов друг от друга - привязанность к изначальным параметрам кода
    def test_fixture_collector_add_one_book(self, collector):
        collector.add_new_book('Фантасмагория')  # добавляем одну книги
        # проверяем, что добавилась именно одна книга, и что книги добавленные в предыдущем тесте - отсутствуют
        # словарь books_genre, который нам возвращает метод get_books_genre, должен иметь длину 1
        assert len(collector.get_books_genre()) == 1

# ТЕСТ 3 (тестируем: add_new_book на ГРАНИЧНЫЕ ЗНАЧЕНИЯ не более 40 символов включительно:
    # ВАЛИДНЫЕ ЗНАЧЕНИЯ: 32, 1, 39, 40 символов)

    @pytest.mark.parametrize('name', [
        'Гордость и предубеждение и зомби',                                       # 32 символа
        'Ю',                                                                      # 1 символ
        'Что делать, если кот вас не очень любит',                                # 39 символов
        'Что делать, если ваш кот хочет вас убить'                                # 40 символов
    ])
    # тестируем метод добавления новой книги (валидные значения - макс 40 символов включительно)
    def test_add_new_book_limit_values_negative_input(self, collector, name):
        collector.add_new_book(name)                                              # добавляем книги по очереди, перебирая валидные значения
        # проверяем, что каждая добавилась книга в books_genre
        # словарь books_genre, который нам возвращает метод get_books_genre, должен иметь длину 1,
        # т.к. каждая книга проверяется отдельно, а не все 4 сразу
        assert len(collector.get_books_genre()) == 1

# ТЕСТ 4 (тестируем: add_new_book на ГРАНИЧНЫЕ ЗНАЧЕНИЯ не более 40 символов включительно:
    # НЕВАЛИДНЫЕ ЗНАЧЕНИЯ: 50, 0, 41 символов)

    @pytest.mark.parametrize('name', [
        'Что делать, если ваш кот никак не хочет вас любить',                     # 50 символа
        '',                                                                       # 0 символ (пустой ввод)
        'Что делать, если баран вас не очень любит',                              # 41 символов
    ])
    # тестируем метод добавления новой книги (невалидные значения - макс 40 символов включительно)
    def test_add_new_book_limit_values_positive_input(self, collector, name):
        collector.add_new_book(name)                                              # проверяем книги по очереди, перебирая невалидные значения
        # проверяем, что ни одна книга не добавилась в books_genre
        # словарь books_genre, который нам возвращает метод get_books_genre, должен иметь длину 0,
        # т.к. каждая книга проверяется отдельно, а не все 3 сразу
        assert len(collector.get_books_genre()) == 0

# ТЕСТ 5 (тестируем: set_book_genre)

    # долго думал объединить ТЕСТ 3 + ТЕСТ 4, но решил,
    # что в реальной практике и большом кол-ве тестов, найти необходимый - потом будет не просто

    # тестируем, что присвоенный книге жанр из словаря == жанру, указанному при присвоении
    def test_set_book_genre_add_one_book_genre(self, collector):
        collector.add_new_book('Крик')                                             # добавляем одну книги
        collector.set_book_genre('Крик', 'Ужасы')                      # присваиваем добавленной книге жанр
        # проверяем, что жанр книги из словаря books_genre == жанру, указанному при присвоении
        assert collector.get_book_genre('Крик') == 'Ужасы'

# ТЕСТ 6 (тестируем: get_book_genre)

    # долго думал объединить ТЕСТ 3 + ТЕСТ 4, но решил,
    # что в реальной практике и большом кол-ве тестов, найти необходимый - потом будет не просто

    # тестируем метод получения присвоенного жанра книги из словаря
    def test_get_book_genre_add_one_book_genre(self, collector):
        collector.add_new_book('Синистер')                                         # добавляем одну книги
        collector.set_book_genre('Синистер', 'Ужасы')                  # присваиваем добавленной книге жанр
        # проверяем метод получения жанра, присвоенного книге, по имени книги
        assert collector.get_book_genre('Синистер') == 'Ужасы'

# ТЕСТ 7 (тестируем: get_books_with_specific_genre)

    # тестируем метод вывода списка книг с определённым жанром
    def test_get_books_with_specific_genre_add_two_book_specific_genre(self, collector):
        collector.add_new_book('Лето злых духов Убумэ')                            # добавляем первую книги
        collector.add_new_book('Самые темные дороги')                              # добавляем вторую книги
        collector.set_book_genre('Лето злых духов Убумэ', 'Ужасы')     # присваиваем жанр первой книге
        collector.set_book_genre('Самые темные дороги', 'Ужасы')       # присваиваем жанр второй книге
        # проверяем вывод добавленных книг по определенному жанру - 'Ужасы'
        assert collector.get_books_with_specific_genre('Ужасы') == ['Лето злых духов Убумэ', 'Самые темные дороги']

# ТЕСТ 8 (тестируем: get_books_genre - получение всего словаря)

    # тестируем метод вывода всего словаря (с добавленными книгами и присвоенными им жанрами)
    def test_get_books_genre(self, collector):
        collector.add_new_book('Эркюль Пуаро')                                     # добавляем первую книги
        collector.add_new_book('Звездные Войны')                                   # добавляем вторую книги
        collector.set_book_genre('Эркюль Пуаро', 'Детективы')          # присваиваем жанр первой книге
        collector.set_book_genre('Звездные Войны', 'Фантастика')       # присваиваем жанр второй книге
        # проверяем вывод всего словаря с книгами и жанрами
        assert collector.get_books_genre() == {'Эркюль Пуаро': 'Детективы', 'Звездные Войны': 'Фантастика'}

# ТЕСТ 9 (тестируем: get_books_for_children)

    # тестируем метод вывода книг, которые подходят детям (у жанра книги не должно быть возрастного рейтинга)
    def test_get_books_for_children(self, collector):
        collector.add_new_book('Енот в лабиринте')                                 # добавляем первую книги
        collector.add_new_book('Айболит')                                          # добавляем вторую книги
        collector.add_new_book('Зов Ктулху')                                       # добавляем третью книги
        collector.set_book_genre('Енот в лабиринте', 'Комедии')        # присваиваем жанр первой книге
        collector.set_book_genre('Айболит', 'Мультфильмы')             # присваиваем жанр второй книге
        collector.set_book_genre('Зов Ктулху', 'Ужасы')                # присваиваем жанр третьей книге
        # проверяем вывод списка книг, подходящим детям, где жанр не совпадает со списком genre_age_rating
        assert collector.get_books_for_children() == ['Енот в лабиринте', 'Айболит']

# ТЕСТ 10 (тестируем: add_book_in_favorites)

    # тестируем метод добавления книги в избранное favorites
    def test_add_book_in_favorites_add_two_books(self, collector):
        collector.add_new_book('Убийство на улице Морг')                            # добавляем одну книги
        collector.add_new_book('Война миров')                                       # добавляем вторую книги
        collector.set_book_genre('Убийство на улице Морг', 'Детективы') # присваиваем жанр первой книге
        collector.set_book_genre('Война миров', 'Фантастика')           # присваиваем жанр второй книге
        collector.add_book_in_favorites('Убийство на улице Морг')                   # добавляем в избранное первую книгу
        collector.add_book_in_favorites('Война миров')                              # добавляем в избранное вторую книгу
        # проверяем, что добавилось именно две книги в избранное
        # список favorites, который нам возвращает метод get_list_of_favorites_books, должен иметь длину 2
        assert len(collector.get_list_of_favorites_books()) == 2

# ТЕСТ 11 (тестируем: delete_book_from_favorites)

    # тестируем метод удаления книги из избранного favorites
    def test_delete_book_from_favorites_add_two_delete_one_books(self, collector):
        collector.add_new_book('Тайна отца Брауна')                                 # добавляем одну книги
        collector.add_new_book('Человек-амфибия')                                   # добавляем вторую книги
        collector.set_book_genre('Тайна отца Брауна', 'Детективы')      # присваиваем жанр первой книге
        collector.set_book_genre('Человек-амфибия', 'Фантастика')       # присваиваем жанр второй книге
        collector.add_book_in_favorites('Тайна отца Брауна')                        # добавляем в избранное первую книгу
        collector.add_book_in_favorites('Человек-амфибия')                          # добавляем в избранное вторую книгу
        collector.delete_book_from_favorites('Человек-амфибия')                     # удаляем из избранного вторую книгу
        # проверяем, что осталась именно одна книга в избранном
        # список favorites, который нам возвращает метод get_list_of_favorites_books, должен иметь длину 1
        assert len(collector.get_list_of_favorites_books()) == 1

# ТЕСТ 12 (тестируем: get_list_of_favorites_books)

    # тестируем метод получения списка Избранных книг - favorites
    def test_get_list_of_favorites_books_add_two_books(self, collector):
        collector.add_new_book('Мальтийский сокол')                                 # добавляем одну книги
        collector.add_new_book('Марсианские хроники')                               # добавляем вторую книги
        collector.set_book_genre('Мальтийский сокол', 'Детективы')      # присваиваем жанр первой книге
        collector.set_book_genre('Марсианские хроники', 'Фантастика')   # присваиваем жанр второй книге
        collector.add_book_in_favorites('Мальтийский сокол')                        # добавляем в избранное первую книгу
        collector.add_book_in_favorites('Марсианские хроники')                      # добавляем в избранное вторую книгу
        # проверяем соответствие списка книг favorites == списку добавленных книг
        assert collector.get_list_of_favorites_books() == ['Мальтийский сокол', 'Марсианские хроники']

# СПАСИБО_СПАСИБО_СПАСИБО_СПАСИБО_СПАСИБО